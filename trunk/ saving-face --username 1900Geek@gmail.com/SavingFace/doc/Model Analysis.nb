(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     92248,       1981]
NotebookOptionsPosition[     88896,       1861]
NotebookOutlinePosition[     89240,       1876]
CellTagsIndexPosition[     89197,       1873]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Saving Face
Analysis of the Model Building Routine\
\>", "Title",
 CellChangeTimes->{{3.589045441782742*^9, 3.589045460515814*^9}, {
  3.5890476007242265`*^9, 3.5890476072516003`*^9}}],

Cell["\<\
The basic premise of the 3D Model\
\>", "Subtitle",
 CellChangeTimes->{{3.589045469163308*^9, 3.5890455038672934`*^9}}],

Cell["\<\
Expected Input (Transformed Depth Data such that the Head is placed in the \
correct orientation in model space)\
\>", "Subtitle",
 CellChangeTimes->{{3.5890478033558164`*^9, 3.5890478923959093`*^9}}],

Cell["\<\
Generis Algorithm for constructing the model
While[Frames < N]
\tRead in byte stream
\tGet Fixed Point, and Yaw Pitch and Roll From SDK
\tCalculate Transformation Matix Based On Yaw Pitch and Roll
\tDetermine Relative Location Of Head SDK. (No need to process everything)
\tFor[Vertices]
\t\tApply Linear Transform to bring point relative to origin
\t\tApply Rotational Transform To Align Head
\t\t//Error Checking Make Sure Point is In Model Space
\t\tMap Point to Model Byte[]
\t\tIncrease that point by one
Save Model
End\
\>", "Subsubsection",
 CellChangeTimes->{{3.5890712840870504`*^9, 3.589071848378326*^9}, {
  3.589072032041831*^9, 3.5890720614825153`*^9}}],

Cell[CellGroupData[{

Cell["\<\
To Transform a series of 3D vertices into hits on a 3 dimensional byte array\
\>", "Subsection",
 CellChangeTimes->{{3.589045511575734*^9, 3.589045591004277*^9}, {
  3.5890466431314554`*^9, 3.589046657755292*^9}}],

Cell[TextData[{
 "The X, Y and Z indices of the Array represent a fixed offset from a \
predetermined minimum\nin x,y,z where the point <0,0,0> is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", 
     RowBox[{"min", ","}]], 
    SubscriptBox["Y", 
     RowBox[{"min", ","}]], " ", 
    SubscriptBox["Z", "min"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsubsection",
 CellChangeTimes->{{3.5890455952755213`*^9, 3.5890458237865915`*^9}}],

Cell[TextData[{
 "The point <n,m,k> translates to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"<", 
     RowBox[{
      SubscriptBox["X", "min"], " ", "+", " ", 
      RowBox[{
       SubscriptBox["\[CapitalDelta]", "x"], "*", "n"}]}]}], ",", " ", 
    RowBox[{
     SubscriptBox["Y", "min"], " ", "+", " ", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]", "y"], "*", "m"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ",  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["Z", "min"], " ", "+", " ", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]", "y"], " ", "*", " ", "k"}]}], ")"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsubsection",
 CellChangeTimes->{{3.589045837907399*^9, 3.5890460126623945`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Given Parameters (Temporary values) units are in meters\
\>", "Subsection",
 CellChangeTimes->{{3.5890461039966183`*^9, 3.5890461611638885`*^9}, {
  3.589047743230377*^9, 3.5890477438754144`*^9}}],

Cell[CellGroupData[{

Cell["\<\
These are adjustable for tunable performance.\
\>", "Subsubsection",
 CellChangeTimes->{{3.589047753786981*^9, 3.589047768883845*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xmin", " ", "=", " ", 
   RowBox[{"-", "0.25"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ymin", " ", "=", " ", 
   RowBox[{"-", "0.25"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"zmin", " ", "=", " ", 
   RowBox[{"-", ".45"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xmax", " ", "=", " ", "0.25"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ymax", " ", "=", " ", "0.25"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"zmax", " ", "=", " ", "0.05"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"deltax", " ", "=", " ", "0.0025"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"deltay", " ", "=", " ", "0.0025"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"deltaz", " ", "=", " ", "0.0025"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xind", " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{"xmax", " ", "-", " ", "xmin"}], "deltax"], "//", "N"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yind", " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{"ymax", " ", "-", " ", "ymin"}], "deltay"], "//", "N"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"zind", " ", "=", " ", 
   RowBox[{
    FractionBox[
     RowBox[{"zmax", " ", "-", " ", "zmin"}], "deltaz"], "//", "N"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"model", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", " ", 
       RowBox[{"xind", " ", "*", " ", "yind", " ", "*", " ", "zind"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lengthx", " ", "=", " ", 
   RowBox[{"yind", "*", "zind"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lengthy", " ", "=", " ", "zind"}], ";"}]}], "Input",
 CellChangeTimes->{{3.5890461356184273`*^9, 3.5890464312493362`*^9}, {
  3.589046462823142*^9, 3.589046532971154*^9}, {3.5890466657197475`*^9, 
  3.589046696764523*^9}, {3.589046794145093*^9, 3.589046798281329*^9}, {
  3.589046835099435*^9, 3.5890468735816364`*^9}, {3.589063869389954*^9, 
  3.5890638805365915`*^9}, {3.589064130610895*^9, 3.5890641789876623`*^9}}],

Cell[BoxData[
 RowBox[{"Length", "[", "model", "]"}]], "Input",
 CellChangeTimes->{{3.5890468097019825`*^9, 3.5890468156903253`*^9}}],

Cell[BoxData[
 RowBox[{"8000000", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Huge", "..."}], " ", "Probably", " ", "Need", " ", "to", " ", 
    "Dial", " ", "Down", " ", "The", " ", "Deltas"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.589071887339555*^9, 3.5890719073406987`*^9}, {
  3.5890719400665703`*^9, 3.5890719434367633`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Function to Transform Coords To Model Space\
\>", "Subsubtitle",
 CellChangeTimes->{{3.5890469021602707`*^9, 3.5890469234034863`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CoordTransform", "[", "vertex_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Floor", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"vertex", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", "xmin"}], ")"}], "/", 
      "deltax"}], "]"}], ",", 
    RowBox[{"Floor", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"vertex", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", "ymin"}], ")"}], "/", 
      "deltay"}], "]"}], ",", 
    RowBox[{"Floor", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"vertex", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "-", "zmin"}], ")"}], "/", 
      "deltaz"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5890469469428325`*^9, 3.589047022867175*^9}, {
  3.5890470538719482`*^9, 3.589047185327467*^9}, {3.589047276024655*^9, 
  3.58904733048877*^9}, {3.589047396702557*^9, 3.589047443850254*^9}, {
  3.589047489225849*^9, 3.5890474971543026`*^9}, {3.5890481207139683`*^9, 
  3.5890481513847227`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.589047332784901*^9, 3.5890473394302816`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Smoke Test Transform Function", "Subsubtitle",
 CellChangeTimes->{{3.5890471994092727`*^9, 3.589047234803297*^9}, {
  3.5890477157958083`*^9, 3.5890477183389535`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoordTransform", "[", 
  RowBox[{"{", 
   RowBox[{"xmin", ",", "ymin", ",", "zmin"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.589047236797411*^9, 3.589047265599058*^9}, {
  3.589047476739135*^9, 3.589047477233163*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.589047278846816*^9, 3.589047341996428*^9, {3.589047454040837*^9, 
   3.5890475013835444`*^9}, {3.5890481574300685`*^9, 3.589048171816891*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoordTransform", "[", 
  RowBox[{"{", 
   RowBox[{"xmax", ",", "ymax", ",", "zmax"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.589047509474007*^9, 3.5890475281330743`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"200", ",", "200", ",", "200"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5890475293291426`*^9, {3.589048159854207*^9, 3.589048174023017*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoordTransform", "[", 
  RowBox[{"{", 
   RowBox[{"0.123567", ",", 
    RowBox[{"-", "0.23363424"}], ",", 
    RowBox[{"-", "0.23657342"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.5890475487502537`*^9, 3.5890475572917423`*^9}, {
  3.5890476320220165`*^9, 3.5890476990218487`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"149", ",", "6", ",", "85"}], "}"}]], "Output",
 CellChangeTimes->{3.5890476419715853`*^9, 3.589047699778892*^9, 
  3.589048177672226*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Model Point Increment Function Note(In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Array index starts at 1)"
}], "Subsubtitle",
 CellChangeTimes->{{3.5890479725314927`*^9, 3.5890479948517694`*^9}, {
  3.589064632379595*^9, 3.5890646616502686`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ApplyCoord", "[", "index_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"model", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"index", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}], "*", 
           "lengthx"}], " ", "+", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"index", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", "1"}], ")"}], "*", 
           "lengthy"}], " ", "+", 
          RowBox[{"index", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "=", 
       RowBox[{
        RowBox[{"model", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"index", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "-", "1"}], ")"}], "*", 
            "lengthx"}], " ", "+", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"index", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "-", "1"}], ")"}], "*", 
            "lengthy"}], " ", "+", 
           RowBox[{"index", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], " ", "+", " ", 
        "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.589048020318226*^9, 3.5890480461037006`*^9}, {
   3.589048095271513*^9, 3.5890481097903433`*^9}, {3.5890481846056223`*^9, 
   3.589048243943016*^9}, {3.5890483098397856`*^9, 3.589048320073371*^9}, {
   3.589048351318158*^9, 3.5890483767936153`*^9}, {3.5890490658230257`*^9, 
   3.5890490877302785`*^9}, {3.589049126955522*^9, 3.5890491297936845`*^9}, {
   3.5890491705880175`*^9, 3.5890491743632336`*^9}, {3.589063916240634*^9, 
   3.5890640176244326`*^9}, {3.589064187432145*^9, 3.589064194779565*^9}, {
   3.589064259868288*^9, 3.5890642629934673`*^9}, 3.5890642956833367`*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5890640705804615`*^9, 3.5890640804100237`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Test Should Increment each value in the array exactly once\
\>", "Subsubtitle",
 CellChangeTimes->{{3.589064088145466*^9, 3.5890641184802012`*^9}, {
  3.589064480576912*^9, 3.589064483001051*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Dynamic", "[", 
  RowBox[{"{", 
   RowBox[{"i", ",", "j", ",", "k"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", "xind"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", "1"}], ",", 
        RowBox[{"j", "\[LessEqual]", "yind"}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"k", "=", "1"}], ",", 
           RowBox[{"k", "\[LessEqual]", "zind"}], ",", 
           RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ApplyCoord", "[", 
            RowBox[{"{", 
             RowBox[{"i", ",", "j", ",", "k"}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.5890460907828627`*^9, 3.5890460915649076`*^9}, {
  3.589048481046578*^9, 3.589048589839801*^9}, {3.5890486221036463`*^9, 
  3.589048717073078*^9}}],

Cell[BoxData[
 DynamicBox[
  ToBoxes[{$CellContext`i, $CellContext`j, $CellContext`k}, StandardForm],
  ImageSizeCache->{114., {2., 8.}}]], "Output",
 CellChangeTimes->{{3.5890486854112673`*^9, 3.589048717676112*^9}, 
   3.589049151324916*^9, {3.589064030121147*^9, 3.5890640429428806`*^9}, 
   3.5890643415209584`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Check", "Subsubtitle",
 CellChangeTimes->{{3.589064521790269*^9, 3.5890645276486044`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"model", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.589048898532457*^9, 3.5890489221418076`*^9}, {
  3.5890645361890926`*^9, 3.5890645467086945`*^9}}],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Output",
 CellChangeTimes->{
  3.589048922556831*^9, 3.5890490510811825`*^9, {3.589049158425322*^9, 
   3.589049161066473*^9}, 3.589064038124605*^9, 3.5890642477895975`*^9, 
   3.5890645143338428`*^9, 3.5890645482477827`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Transform Module", "Section",
 CellChangeTimes->{{3.589064697978347*^9, 3.589064704937745*^9}}],

Cell[CellGroupData[{

Cell["Move points To Origin", "Subsection",
 CellChangeTimes->{{3.5890647257629356`*^9, 3.5890647345614395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MoveToOrigin", "[", 
   RowBox[{"vertex_", ",", "referenceVertex_"}], "]"}], ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"vertex", "[", 
      RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
     RowBox[{"referenceVertex", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", 
    RowBox[{
     RowBox[{"vertex", "[", 
      RowBox[{"[", "2", "]"}], "]"}], " ", "-", " ", 
     RowBox[{"referenceVertex", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ",", 
    RowBox[{
     RowBox[{"vertex", "[", 
      RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
     RowBox[{"referenceVertex", "[", 
      RowBox[{"[", "3", "]"}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5890647525454674`*^9, 3.589064997579483*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Smoke Test", "Subsection",
 CellChangeTimes->{{3.589065022481907*^9, 3.5890650472173223`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5890651071537504`*^9, 3.5890651091558647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"refV", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"100", ",", "100", ",", "100"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MoveToOrigin", "[", 
   RowBox[{"refV", ",", "refV"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"Should", " ", "Return", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.5890650945760307`*^9, 3.5890651360664043`*^9}, {
  3.589065212915799*^9, 3.5890652423244815`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.5890652452806506`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Magnitude of the vector", "Subsection",
 CellChangeTimes->{{3.5890654612580037`*^9, 3.5890654678973837`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Magnitude", "[", "vertex_", "]"}], " ", ":=", 
  RowBox[{
   SqrtBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"vertex", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "2"], " ", "+", 
      SuperscriptBox[
       RowBox[{"vertex", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "2"], " ", "+", " ", 
      SuperscriptBox[
       RowBox[{"vertex", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "2"]}], ")"}]], " ", "//", 
   "N"}]}]], "Input",
 CellChangeTimes->{{3.589065475037792*^9, 3.5890655706802626`*^9}, {
  3.5890656251283765`*^9, 3.5890656517679005`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Smoke Test", "Subsection",
 CellChangeTimes->{{3.5890655831629763`*^9, 3.5890655886412897`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Magnitude", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.5890655951976647`*^9, 3.589065608418421*^9}}],

Cell[BoxData["1.7320508075688772`"], "Output",
 CellChangeTimes->{{3.5890656315577445`*^9, 3.589065654925081*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Rotate a point around the origin in x, y, z\
\>", "Subsection",
 CellChangeTimes->{{3.589065284137873*^9, 3.589065305257081*^9}, {
  3.589065366921608*^9, 3.5890653730819607`*^9}, {3.589068050227084*^9, 
  3.589068053258258*^9}}],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Basic Equations",
 FontWeight->"Bold"]], "Subsubsection",
 CellChangeTimes->{{3.589071090429974*^9, 3.5890711303702583`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"RotateX", "[", 
   RowBox[{"vertex_", ",", "\[Theta]_"}], "]"}], " ", ":=", " ", 
  RowBox[{"vertex", "  ", ".", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RotateY", "[", 
   RowBox[{"vertex_", ",", "\[Theta]_"}], "]"}], " ", ":=", " ", 
  RowBox[{"vertex", "  ", ".", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", "0", ",", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RotateZ", "[", 
   RowBox[{"vertex_", ",", "\[Theta]_"}], "]"}], " ", ":=", " ", 
  RowBox[{"vertex", "  ", ".", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"-", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]}]}], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
This Method Calculates The Matrix Once Reuses the calculations\
\>", "Subsubsection",
 CellChangeTimes->{{3.5890711408578587`*^9, 3.5890711759858675`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetRotationMatrixX", "[", "\[Theta]_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"Tx", " ", "=", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
            RowBox[{"-", 
             RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], "}"}], "//", 
        "N"}]}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Expensive", " ", "Operation", " ", "only", " ", "do", " ", "once", " ", 
    "perframe"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetRotationMatrixY", "[", "\[Theta]_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Ty", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", "0", ",", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0", ",", 
           RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], "}"}], "//", 
       "N"}]}]}], "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{
   "Expensive", " ", "Operation", " ", "only", " ", "do", " ", "once", " ", 
    "perframe"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"SetRotationMatrixZ", "[", "\[Theta]_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"Tz", " ", "=", "  ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"-", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], "//", "N"}]}]}], 
    "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{
   "Expensive", " ", "Operation", " ", "only", " ", "do", " ", "once", " ", 
    "perframe"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"SetCombinedMatrix", "[", 
    RowBox[{"\[Theta]_", ",", "\[Phi]_", ",", "\[Rho]_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetRotationMatrixX", "[", "\[Theta]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SetRotationMatrixY", "[", "\[Phi]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SetRotationMatrixZ", "[", "\[Rho]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Tm", " ", "=", " ", 
       RowBox[{"Tx", " ", ".", " ", "Ty", "  ", ".", " ", "Tz"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.589068892836279*^9, 3.5890689154035697`*^9}, {
  3.5890689514046288`*^9, 3.589069335343589*^9}, {3.5890693889446545`*^9, 
  3.5890693929588842`*^9}, {3.5890694989949493`*^9, 3.5890695050672965`*^9}, {
  3.5890699289925437`*^9, 3.589069946855565*^9}, {3.589070024481005*^9, 
  3.5890700386968184`*^9}, {3.589070595154646*^9, 3.5890705968987455`*^9}, {
  3.5890708220316224`*^9, 3.5890708252958093`*^9}, {3.5890709827528152`*^9, 
  3.58907099979379*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test Method", "Subsubsection",
 CellChangeTimes->{{3.589071200434266*^9, 3.589071203154422*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TestPoint", "[", 
    RowBox[{"v_", ",", "test_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetCombinedMatrix", "[", 
       RowBox[{
        RowBox[{"test", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"test", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", 
        RowBox[{"test", "[", 
         RowBox[{"[", "3", "]"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"v", " ", ".", " ", "Tm"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5890695840208125`*^9, 3.5890697281740575`*^9}, 
   3.5890698874301662`*^9, {3.589070208390524*^9, 3.589070221935299*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"TestPoint", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"\[Pi]", "/", "4"}], ",", 
        RowBox[{"\[Pi]", "/", "4"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", "\[Pi]"}], ",", ".01"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.589069402464428*^9, 3.5890694029404554`*^9}, {
   3.5890694368053923`*^9, 3.5890694444038267`*^9}, {3.5890695173970013`*^9, 
   3.589069579732567*^9}, {3.589069739164686*^9, 3.5890698277347517`*^9}, 
   3.58906986336579*^9, {3.58906997386911*^9, 3.589069988757962*^9}, {
   3.589070241743432*^9, 3.589070252240032*^9}, {3.5890702928553553`*^9, 
   3.589070305654087*^9}, 3.58907033681487*^9, {3.58907038367955*^9, 
   3.589070416421423*^9}, {3.589070455991686*^9, 3.5890704631670966`*^9}, 
   3.5890710432502756`*^9}],

Cell[BoxData[
 Graphics3DBox[
  {Hue[0.67, 0.6, 0.6], Point3DBox[CompressedData["
1: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
    "]]},
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{630.980795822092, 273.},
  PlotRange->{{-0.7247411337801507, 1.724744399461065}, {-1.7247434730710298`,
     0.724744867319538}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  ViewPoint->{-3.368531104884931, 0.271889478258024, 0.17051189704910175`},
  ViewVertical->{-0.5469976080148019, 0.055133105141914635`, 
   2.0882917024800074`}]], "Output",
 CellChangeTimes->{{3.5890694250057173`*^9, 3.589069445721902*^9}, {
   3.5890698156460605`*^9, 3.5890698285667996`*^9}, 3.5890698647758703`*^9, {
   3.589069978458373*^9, 3.589069989911028*^9}, {3.5890702295867367`*^9, 
   3.5890702529100704`*^9}, {3.589070296620571*^9, 3.5890703063601274`*^9}, 
   3.5890703376659184`*^9, {3.5890703877657843`*^9, 3.589070417375478*^9}, 
   3.589070464681183*^9, 3.5890708359654193`*^9, 3.58907100311898*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RotateX", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", "p"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"p", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}], ",", ".01"}], "}"}]}], "]"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RotateY", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "p"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"p", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}], ",", ".01"}], "}"}]}], "]"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RotateZ", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", "p"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"p", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}], ",", ".01"}], "}"}]}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5890673318309946`*^9, 3.589067421709135*^9}, {
  3.5890674524458933`*^9, 3.5890674851637645`*^9}, {3.589067534004558*^9, 
  3.589067584165427*^9}, {3.5890677786875534`*^9, 3.5890679397197638`*^9}}],

Cell[BoxData[
 Graphics3DBox[{
   {Hue[0.67, 0.6, 0.6], Point3DBox[CompressedData["
1:eJxd2Xc8Vv/7B/BIRELISAqVSkgRpfSurFApUUhIZKXSx0hGqaisshUqK1Rk
Zett7z2y123e3EM2iZ9/vvfV49cf/ng+zuN07nPe532u63UJm9zXMqPfsGGD
/fqfjRv+/78p9P/lS2jS3tA1KmIa306sfvwC/89DfM2CDVapyFw3ru7l4yCa
zxsc07+8QkXl5iG/92R9oPmjsFdPHy5R0Z+HLGbOTrE01w04IFAyR0WnTNei
+0ISaX5y8OS5c7+pKMTwlcT79GSaU4uUuaYmqYju1tjZ8rFUmq/p7EutHaEi
HqVt29XtM2h+EHMrdfRR0Y9OqzZV+iyaF/EmLHG2U5F4jXdNsl8OzRdVaxlc
66no0MKY4r0d+TTfl10WyVNGRXUjp97Yx/2k+Wq/JP1A7vr1v31C1xVaSHNC
2rxd53cquv9jyMWnp4jmckTD0xtjqUiE3E+sEiqheafo8teboVR02PTVn9em
pTT/uZrIQXxNRaYNohal8WU0r2qJKI1zpiLl/AfEBxPlNB8L0dgXdJeKbtYU
nHopXknzxyaOwRkGVJTfrLBnzaaK5vtnRF2ZLlCR6pikSWNyNc35V2PUfOWp
yFGDq2SaUgP/r+kjG5UDVMR3bozLULKO5noq1sbS29fPX3JtP4tNPc2jKK4f
tenWz7N9ppXypQGeY/T4ty8kCirYnbFCZ9dI85gLvByy7RS094henhBnE81T
6T7rLBRSkJfdwfcN38FFrW+yUxMpaL6m+A3LxWaa5zIfbhUMoCDp3NzgOiJ4
tO6RMy+cKOh7SXYCt2cLzcPrw2dFjClIPu9tZbdwK83NCopDl5UpiG7ZYHFX
AXgqO1fblkMUtPlZ2Omu6200zxrZevM6OwX5sJyIY54Gt+NQGumdJqPXc5Un
Er1/wf20vnLgUxsZ9Uu4b/2xt53mz3g7Rj5kkdEJssmxgwXgbm+cCV1hZKRs
eaWaTqcD1m1095i2ExlZmx8iypPApTXelG7VI6O7mcNpjc86ae5/a/cFxuNk
pOj78QLm66L5+WN01xEPGcXVl/XTJ4M3bPAvzpkhoVtSIu9Dz3XTXAKx2jo0
ktA+laUkp1/gGoPeag7fSGjgnohWnGUPze1vr8rlviShI7FCxTwr4HtLhCUU
TUhI5tDJ09W+vTTX1HHdxXmKhIREQ7bk7+qj+WXXG4wHtpPQ1CYNu/Fk8HdK
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
IpGCvTnkxY/7wjyCSx794F2lYJGL7+lce2F+UXUmppuHk4qHpM7/yv4I844v
XN4m6vuo+HnWyuKhWzAf+ewvVJsqR8VaHPr+fcK1NJdVqfh4QY2Ku09N1XQM
wvwl/8luqx36VPz9CVOXSBTMa9IUmQt2WFGxyler36VGMN/REIo/fNGJii9q
H7lQIVgB34VuY8PUl1RcPvr6wNFumB+tbhidUAmmYoOo55Vbw2De9ENNymVr
NBVfceiwNdGG+VTziMdPhvV+9UZbps1xjmKai39yvi2eQ8XjN703h9XA/Ov+
wLzwixIqPrQctIdrK4bf63U4c8t6v5pI/i9L7BnM11BO6mBxGxXvybNzeDkP
87gMfSPrxF4q/kAVYpe3gvnd0xjb3XiYindI3pS52gvzvsjbjxs2rverQz//
RAxppkG9J2um5bjerx5j+8C4+Pw7vNdvHr3gX+9XSfWOavrmX2i+9/M11YlF
KpbkCHvGrh4Hdab8qjvxDxXvE30qe0L8E82PnKgR4l3vJ2tdXnb9FgiheT1y
3P7fev8p8zKjvLDgJc3b5/iv/113O05xVk4+fZo/UztI+LHuW/dTYprk3NH/
3MrTKTti/fxM8sp6OzoDaP5eTWEwdb1f9b+/5Ubj9kia39DaZDm33q+efnxo
YCghhua9hwtvma/3q147vPMMyxNonlmTQ2CapuKjEuMn5IaSaC7Z9H5z+3q/
On+wnRT3JJXm9r/N51rX+9VgK9E3ClszaP6dwb2RboCK7zC9rrzyPpPm40yf
ym92rK+H2xsHm0RzaL640M5MXO9XfWJN9yal5dFc93VgU0w5FaseziA0K/yk
+VJ+oL5fPhUTnmge5zctpDmXFmU0IZWKue2nA3sTimjOv53150wcFe/qJkhL
kovh926JF7//jopDWbOq6Y+UwvldK18I+FCxuuJRtqt2ZXB8T7ngkuv6uiI9
zuLJKqe5qIei9ub7VGw5fvm58lIFzbtuHfBSM6JiriTFo+3yVTRnsowTLbhE
xU+vj78qca6mueaiRMhtBSp+F8F+mT6/huarWx3UFQ6tv9dRf7S9/9TSfMLo
fq463/p1ZgRbXpOvp/mIpoqJDwMVi0/EmN541EBzhp+GJfRTFHz3whpHlX4j
zcOzL5smd1GwWqfJ2aVF8OMsI41vSim4ZLVaNjekieYecdvexyet74fcRmNM
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

     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], Point3DBox[CompressedData["
1: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
8fi/0wPsfJb4/wD7KaI/
     "]]}, 
   {Hue[0.1421359549995791, 0.6, 0.6], Point3DBox[CompressedData["
1:eJxd22k0ld/bB/CSiISQISlUlJAiSmlXplApUUiUyJRKP0PmVFSmMiuUIUlF
psza5nkeMk/HeDiDzCQeb/7naj1eWNZnHffa65x97r2va39vIeMHWqZ0GzZs
sFv/tWnD//+ZQv/7i3F8B7Ha6Tn6Epa0L2yNSnMz3fi6F07BKNTPNMRgFbzc
LPT33qz3aN7gmP7lFfA/j5hNnR0/osfhL588WgI/ZbIW2xeaiHQDD/CXzIGH
Gr6UeJeejE4Onjx37jf4xttjZ8vHUhG1SJlzahKcW2n7DnW7DLSmsz+1dgT8
R6dlmypdFjqIuZQ6+sDFa3xqkv1zUBHP5yWOdvBDC2OK93fmo0XVWnrXevC6
kVOv7eJ/ov3ZZVHcZf+M/437xq6wQrTaL0k3kAv+4MeQi29PESKkzdt2fgcX
JvcTqwRLkBzR8PSmj+CHTV7+eWVSijpFlr/eDAM3aRAxL00oQz9XE9mJr8CV
8x8SH06Uo6qWyNJ4Z/CbNQWnXohXorFQjf3B98DzmxX2rllXISdjh5AMA3DV
MUnjxuRqJDoj4sp4AdxBg7NkmlKD+Fbj1PzkwXnPjXEaStahKpPH1ioH/rl+
yTVRZut6pKdidUt6xz/X2THTSvnSgGIorh+0N4IX7MlY2WjbiKix49++kCg0
33dEL0+QownFXeBhl20H97Y9+K7hexNK3fhJZ6EQfL6m+DXzxWYkYnWTjZoI
Lp2bG1JHbEa5TIdbBQLBv5dkf+byakGxukfOPHcEl897U9kt1Ioi6iNmhW+B
b1w2WNxd0IpMC4rDlpXBtzwNP911vQ2lsnG2bT0E7st8Ip5pug1ljWy7eZ0N
/NVc5YlEn1/Ill1ppHeaTPN+CY9tP/a1oyqrKwei28BPkI2PHSxoR095Okbe
Z4ErW1yp3qjTgdxeOxO6wsGtzA4R5UkdaDG2e0zbEfxe5nBa49NOJK3xunSb
Hrii34cLmLcLBdzec4HhOHh8fVk/XXIXOn9s43XEDX5bSvhd2Llu1LAhoDhn
hkTz/SpLSY6/upEEYrGxbwQfuC+sFW/RgzQGfdTsv4Ef+ShYzL3Sg+zurMrl
vgCXOXTydLVfL9pXIiShaAwuKBK6NX93H9LUcd3NcQp8arOG7XhyH7rseoPh
wA7wuO4nFRqn+9FbpZIhT/Ikza+9fK5HqO1Hd1pscsXLwOtMp85qSwwg++qW
QIFI8GKePK26/wbQKbdVR71H4K3magFdOQPoMmeix6AquBa951GntQGU5rK/
MHMXePr0/vtflAZR2Q29y11TE3Ad1Z9uFq8G0Y3izCsXS8EDf5bF/KgbRGO/
ZMbZw8D1zsbz+G0noB03zp8SsQC3NSreS9EmoHmuHid/efCKZG+W9jACIu1U
a1PfCv6Nz51fpYuAfOg0PQy6iTT/zIuiTuwaQp+nt+aUfgH/2h40+P3mECoK
n8197ggereJ8MuH9ENpAV1sVpQpO4pLeuLt/CM1ejxDfvgM8KUzRl2PPMLrp
kSg5MDgO8+qd94lnhsNoZ8KjPSzJ4Dl8Khb3o4ZRYNQHrVBHcMXx3e7N3cMo
8+jfPU+UwH+ekiYk8Y2gkVv/DVWzgqceFPq7em0Eke+urDh0jMG8WmU/XRo0
gjTLIhpfxoBve425VxpG0B4hnfJVC3BXi5crH7eOojiWverdR8DLSQ/MC1RG
0eIPcs2epVGaD1+QaFf0GEXLzh64DoP7u8hUyeaNou8WnpGjnuB1q7g4eHYU
mYbb9FlpgLd/6NIwkBhDnY896Y3YwYlcFlM+pmMoeNPPgKLWEZqPPZU+Ixw1
hsoaa1hCwsGdJyn1Aq1jqJuHaUP3DfBnT1RkXJnHEX/Yg6Xg3eBuvcNb0Zlx
5HLH37t0YJjmjSKuc7ftxhFdjPt5q1jwN6ytwcOJ42h0b1+N9x3wlJ+VAWW9
46h0OTdl3z7ws59vhm/aTkS7CIGh8sNDNA+WK9KNUiQiqxhFwfo4cGbray8C
7Ihoh9bG2QFjcG39gp6+T0T05I1Gnq0Q+Miz7h3P24nIM4wg7NNPgHVZZHjG
nXECxajkd+2PAj9w69apJtkJxM65FKKiDx6nIJdjbzqBpIY7mKnc4Kxffhx/
EDSBLLu/Twu2DNI86lyoX07hBKIwdjP1+YNTWJhea5MnkA/DD7YD6uCy7Hm8
iG8Skf28yzdsBt/U1Mv8WGkS+Y75z1jgAZobf5dUX70/iaJ1Gg1NHcGR6Cpu
DJ9EV++Kt8weBS+altWnFE2ivRYvT8l09MPnzmq69drEJHKUGBRMVgN3+JBf
zcBBQpwO95b0c/tofjJXMHjtOAmVWP5nc1oMvGKrmDkyIqE9xLsnDN720vz4
HYkLZc9JaPvtCoZsRvCgXefU3ySS0AkPlmAdux6aG947b/OhjoRqKn2jjxO6
aV7vQ239PUVCbosmUyaXwL3K8vy8OMlIysToQl9OF83fGrPkGBwjo7H93R6f
94GXOAg5/neNjMqOphtX+HfC/TBQaK7KnoxCtPaXnV7sgHVfdY+eUSgZpS9n
P+O4DW4YsfvX0R9klMsi4qpS1U7zUp2dsYotZNTqeDK4TwrcT5Rp8c3U+jhr
yr73hf2CdSGbwLNzGwVde2OXq77aBvM58KNK3wEKWk0vixUxAT83fq2+R5GC
mLIH9e2rWmG/cXb7KpchBWl1+nQoSIL3ra0e9HKgoFn+TTs8AltoHll25+vh
NxSUd4bIojTfTPOQ3A8D7J8pyPjjgUJvPXD0XVriIKYgdaauI3r5TTTX2F22
5NBGQUYXxMzTd4MHsQhnrExQUOnmM/einjTSXKpCqSFzjYL4xM8Fy5Y2wPvv
fr0knpOKpM5KCRl71dP8WHnWtioRKoobk44tU62D+/zgkpTgCSoaxjrIYkst
zX9vJmV8UaeilaUX+3Uqq2EfcvetiPkNKtIueugV8KIK9ktiF3l1rajo6yuZ
cBGVSppLyIUIOTlR0bvTZ0J20VfA93FQqb/uJRVtus6Z71xURvOFRw4zWqFU
1F/HpHnBrZTm70IDNzPFUdGbjSLBofIlsA6Gny+mJlNRmHNXq/F8Eaw7Pu+6
Gdbrh/9iWm7mpBbSvEexa8ulUiriiHn6V6nzJ82bTnxjKKtbf33tGa6Ll/Jh
/6bAFGb1i4rUrbZ8iSjOgc+X/YzH2fX6Z6IDW5+VzaI5uX0+QGW9XpJq/MCh
mZhBcx9r8Qin9foqYalMs40/De4/fidse6eoSKvQH1fxf4f1rr9p6f56/fY0
ynODwFoiza8P0rMeXq/3DI6NEsoGP8L9/NPpcIH1+pDTZnN7zYsPNDd3Pu8p
v15Pit81UFbQCKE5wVStwnO9/vwo9uyiyi4vWN+dy3XW1v1P93IoB686XGdX
nETCuufpl3+51PkU08azWeiK6/r1x6pYXZoSg2hedm6gwmN9PNLcRmVOo1E0
n/3b9z5jffwu1/W3SW3/SPNlUcfxHfNUZCUlf+yDZCLNbTea58ev16vsev3a
FhrJNGd0L5IzIVHRvsZXdpnpqTSv9F5wuTJKRYNLXQpKZzNo7izcnm7dT0WU
cfXzF+szaV6k9YIpZ71ePaou2luon0PzQ2wvU6QbqKhYNeC8/2gezdXHUgZ6
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
9j9vbjD3j/8f0nKiPw==
     "]]}},
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{627.2775045184353, 278.},
  PlotRange->{{-0.9999987317275395, 1.}, {-0.9999987317275395, 1.}, Automatic},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {Automatic, Automatic}},
  ViewPoint->{0.32788648017866595`, -3.3110634831057535`, 0.6159131975852153},
  ViewVertical->{0.03781126062954915, -0.43274128450634475`, 
   2.2518121719703377`}]], "Output",
 CellChangeTimes->{
  3.589067584632454*^9, 3.589067789681182*^9, {3.589067877504205*^9, 
   3.5890678967563066`*^9}, 3.5890679434199753`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1911, 967},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (November 20, 2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 194, 5, 144, "Title"],
Cell[776, 29, 129, 3, 49, "Subtitle"],
Cell[908, 34, 210, 4, 49, "Subtitle"],
Cell[1121, 40, 676, 17, 333, "Subsubsection"],
Cell[CellGroupData[{
Cell[1822, 61, 223, 4, 35, "Subsection"],
Cell[2048, 67, 471, 13, 60, "Subsubsection"],
Cell[2522, 82, 784, 26, 32, "Subsubsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3343, 113, 206, 4, 43, "Subsection"],
Cell[CellGroupData[{
Cell[3574, 121, 144, 3, 34, "Subsubsection"],
Cell[3721, 126, 2211, 57, 362, "Input"],
Cell[5935, 185, 133, 2, 31, "Input"],
Cell[6071, 189, 339, 7, 31, InheritFromParent]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6459, 202, 144, 3, 28, "Subsubtitle"],
Cell[6606, 207, 1068, 30, 31, "Input"],
Cell[7677, 239, 94, 1, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7808, 245, 173, 2, 28, "Subsubtitle"],
Cell[CellGroupData[{
Cell[8006, 251, 248, 5, 31, "Input"],
Cell[8257, 258, 250, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8544, 268, 201, 4, 31, "Input"],
Cell[8748, 274, 182, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8967, 283, 312, 7, 31, "Input"],
Cell[9282, 292, 177, 4, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9508, 302, 277, 7, 29, "Subsubtitle"],
Cell[9788, 311, 2110, 52, 72, "Input"],
Cell[11901, 365, 96, 1, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12034, 371, 206, 4, 28, "Subsubtitle"],
Cell[CellGroupData[{
Cell[12265, 379, 1257, 31, 212, "Input"],
Cell[13525, 412, 319, 6, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13893, 424, 96, 1, 28, "Subsubtitle"],
Cell[CellGroupData[{
Cell[14014, 429, 274, 6, 31, "Input"],
Cell[14291, 437, 267, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14595, 447, 101, 1, 79, "Section"],
Cell[CellGroupData[{
Cell[14721, 452, 113, 1, 43, "Subsection"],
Cell[14837, 455, 774, 21, 31, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15648, 481, 100, 1, 43, "Subsection"],
Cell[15751, 484, 96, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[15872, 489, 515, 14, 52, "Input"],
Cell[16390, 505, 127, 3, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16566, 514, 115, 1, 43, "Subsection"],
Cell[16684, 517, 625, 18, 41, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17346, 540, 102, 1, 43, "Subsection"],
Cell[CellGroupData[{
Cell[17473, 545, 187, 4, 31, "Input"],
Cell[17663, 551, 114, 1, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17826, 558, 239, 5, 43, "Subsection"],
Cell[CellGroupData[{
Cell[18090, 567, 149, 2, 34, "Subsubsection"],
Cell[18242, 571, 1889, 54, 72, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20168, 630, 165, 3, 34, "Subsubsection"],
Cell[20336, 635, 3950, 101, 212, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24323, 741, 102, 1, 34, "Subsubsection"],
Cell[24428, 744, 822, 21, 92, "Input"],
Cell[CellGroupData[{
Cell[25275, 769, 1023, 22, 31, "Input"],
Cell[26301, 793, 20607, 343, 288, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46945, 1141, 1248, 34, 31, "Input"],
Cell[48196, 1177, 40624, 676, 326, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
